#!/bin/bash

OS=$(uname)
LOG_FILE="process.log"
LOCK_DIR="locks"

# Load groupname from .env if it exists
if [ -f .env ]; then
    GROUPNAME=$(grep '^USER_ACCOUNT=' .env | cut -d '=' -f2)
fi

usage() {
    cat <<EOF
Usage: $0 {start|status|stop|sync|list} [OPTIONS]

Commands:
  start <target_directory> <target_time_series> [--restart]
      Start the Go executable as a background process. Use --restart to stop any existing instance.

  status
      List existing ifcb-file-watcher jobs

  stop <target_directory|target_time_series>
      Stop running processes associated with the target directory or time series.

  sync <target_directory> <target_time_series>
      One-time operation to upload or sync an existing group of data files to a time series.

  list
      List all existing Time Series for your account.

Options:
  -h, --help
      Display this help message.

  --restart
      Stop any existing instance of the job before starting a new one (used with 'start').
EOF
}

cd "$(dirname "$(realpath "$0")")"

case "$OS" in
    "Linux") 
        EXECUTABLE="./ifcb-file-watcher"
        ;;
    "Darwin")
        EXECUTABLE="./ifcb-file-watcher-macos"
        ;;
    "CYGWIN"*|"MINGW"*|"MSYS"*|"Windows_NT"|"WindowsNT")
        EXECUTABLE="./ifcb-file-watcher-windows"
        ;;
    *) 
        echo "Detected unsupported OS: $OS"
        exit 1
        ;;
esac

is_running() {
    ps -p "$1" > /dev/null 2>&1
}

hash_job() {
    local input="$1|$2"
    echo "$input" | awk '{ 
        hash = 0; 
        for (i = 1; i <= length($0); i++) {
            hash = (hash * 31 + ord(substr($0, i, 1))) % 1000000007;
        }
        print hash 
    } function ord(c) { return index("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", c) }'
}

start() {
    local target_dir=$1
    local target_time_series=$2
    # Check for invalid groupname prefix
    if [[ "$target_time_series" == "${GROUPNAME}"* ]]; then
        # Remove $GROUPNAME prefix with optional '_' or '-' after it
        cleaned_ts="${target_time_series#${GROUPNAME}[-_]}"
        cleaned_ts="${cleaned_ts#${GROUPNAME}}"  # In case no separator
        echo "ERROR: Time series name cannot begin with groupid ('${GROUPNAME}'). Consider using '$cleaned_ts' rather than '$target_time_series'."
        exit 1
    fi

    # Enforce max length of 64 characters for GROUPNAME_cleaned_ts
    combined_name="${GROUPNAME}_${target_time_series}"
    if (( ${#combined_name} > 64 )); then
        echo "ERROR: Time series name exceeds the 64-character limit after addition of groupid ('${combined_name}': ${#combined_name} chars)."
        exit 1
    fi

    local restart_flag=$3

    if [[ -z "$target_dir" || -z "$target_time_series" ]]; then
        echo "Error: Missing required inputs for 'start'."
        usage
        exit 1
    fi

    mkdir -p "$LOCK_DIR"
    local job_id=$(hash_job "$target_dir" "$target_time_series")
    local lock_path="$LOCK_DIR/$job_id.lock"

    if [[ -d "$lock_path" ]]; then
        if [[ -f "$lock_path/pid" ]]; then
            local existing_pid=$(cat "$lock_path/pid")
            if is_running "$existing_pid"; then
                if [[ "$restart_flag" == "--restart" ]]; then
                    echo "Restarting job: killing PID $existing_pid"
                    kill "$existing_pid" 2>/dev/null
                    # Remove previous PID from process.log
                    tmpfile=$(mktemp "$LOG_FILE.XXXXXX")
                    grep -v "^$existing_pid " "$LOG_FILE" > "$tmpfile"
                    mv "$tmpfile" "$LOG_FILE"
                    rm -rf "$lock_path"
                else
                    echo "Job already running with PID $existing_pid. Use --restart to replace it."
                    return
                fi
            else
                echo "Removing stale lock for PID $existing_pid."
                rm -rf "$lock_path"
            fi
        else
            echo "Removing malformed lock at $lock_path"
            rm -rf "$lock_path"
        fi
    fi

    mkdir "$lock_path"
    echo $$ > "$lock_path/pid"

    ./$EXECUTABLE -check-time-series "$target_dir" "$target_time_series"
    if [[ $? -eq 0 ]]; then
        nohup $EXECUTABLE "$target_dir" "$target_time_series" > "ifcb-file-watcher-$job_id.log" 2>&1 &
        local pid=$!
        local tmpfile=$(mktemp "$LOG_FILE.XXXXXX")
        cp "$LOG_FILE" "$tmpfile" 2>/dev/null || touch "$tmpfile"
        echo "$pid $target_dir $target_time_series" >> "$tmpfile"
        mv "$tmpfile" "$LOG_FILE"
        echo "$pid" > "$lock_path/pid"
        echo "Started process with PID $pid for '$target_dir' and '$target_time_series'"
    else
        rm -rf "$lock_path"
    fi
}

status() {
    echo "Listing ifcb-file-watcher instances..."
    if [[ ! -f "$LOG_FILE" ]]; then
        echo "No running instances found."
        return
    fi

    printf "%-8s %-10s %-40s %-20s\n" "PID" "STATUS" "DIRECTORY" "TIME_SERIES"
    echo "--------------------------------------------------------------------------------------------"

    while IFS=' ' read -r pid dir ts; do
        if is_running "$pid"; then
            printf "%-8s %-10s %-40s %-20s\n" "$pid" "Running" "$dir" "$ts"
        else
            printf "%-8s %-10s %-40s %-20s\n" "$pid" "Stale" "$dir" "$ts"
        fi
    done < "$LOG_FILE"
}

stop() {
    local target=$1
    if [[ -z "$target" ]]; then
        echo "Error: Missing required input for 'stop'."
        usage
        exit 1
    fi

    local updated_log=""
    while IFS=' ' read -r pid dir ts; do
        if [[ "$dir" == "$target" || "$ts" == "$target" ]]; then
            if is_running "$pid"; then
                kill "$pid" 2>/dev/null
                echo "Stopped PID $pid for '$dir' and '$ts'"
            else
                echo "PID $pid not running. Cleaning stale entry."
            fi
            local job_id=$(hash_job "$dir" "$ts")
            rm -rf "$LOCK_DIR/$job_id.lock"
        else
            updated_log+="$pid $dir $ts"$'\n'
        fi
    done < "$LOG_FILE"

    local tmpfile=$(mktemp "$LOG_FILE.XXXXXX")
    echo -n "$updated_log" > "$tmpfile"
    mv "$tmpfile" "$LOG_FILE"
}

sync() {
    local target_dir=$1
    local target_time_series=$2
    # Check for invalid groupname_ prefix
    if [[ "$target_time_series" == "${GROUPNAME}_"* ]]; then
        cleaned_ts="${target_time_series#${GROUPNAME}[-_]}"
        cleaned_ts="${cleaned_ts#${GROUPNAME}}"  # In case no separator
        echo "ERROR: Time series name cannot begin with groupid ('${GROUPNAME}'). Consider using '$cleaned_ts' rather than '$target_time_series'."
        exit 1
    fi

    # Enforce max length of 64 characters for GROUPNAME_cleaned_ts
    combined_name="${GROUPNAME}_${target_time_series}"
    if (( ${#combined_name} > 64 )); then
        echo "ERROR: Time series name exceeds the 64-character limit after addition of groupid ('${combined_name}': ${#combined_name} chars)."
        exit 1
    fi

    if [[ -z "$target_dir" || -z "$target_time_series" ]]; then
        echo "Error: Missing required inputs for 'sync'."
        usage
        exit 1
    fi
    ./$EXECUTABLE -sync-only "$target_dir" "$target_time_series" > ifcb-file-watcher.log 2>&1 &
    echo "Sync complete for '$target_dir' and '$target_time_series'"
}

list() {
    ./$EXECUTABLE -list
}

case $1 in
    start)
        shift
        start "$@"
        ;;
    status)
        shift
        status
        ;;
    stop)
        shift
        stop "$@"
        ;;
    sync)
        shift
        sync "$@"
        ;;
    list)
        shift
        list
        ;;
    -h|--help)
        usage
        ;;
    *)
        echo "Error: Invalid or missing command."
        usage
        exit 1
        ;;
esac
